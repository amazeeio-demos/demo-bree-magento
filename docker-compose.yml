version: "2.3"

#x-lagoon-project:
#  # Lagoon project name (leave `&lagoon-project` when you edit this)
#  &lagoon-project magento

x-volumes:
  &default-volumes # Define all volumes you would like to have real-time mounted into the docker containers
  volumes:
    # - storage:/app/app/etc/storage:delegated ### Local overrides to mount host filesystem. Automatically removed in CI and PROD.
    # - media:/app/pub/media:delegated
    - .:/app:delegated


x-environment:
  &default-environment # Route that should be used locally, if you are using pygmy, this route *must* end with .docker.amazee.io
  LAGOON_ROUTE: &default-url http://magento.docker.amazee.io
  # Uncomment if you like to have the system behave like in production
  #LAGOON_ENVIRONMENT_TYPE: production
  # Uncomment to enable xdebug and then restart via `docker-compose up -d`
  #XDEBUG_ENABLE: "true"

x-user:
  &default-user # The default user under which the containers should run. Change this if you are on linux and run with another user than id `1000`
  user: "1000"

volumes:
  media: {}
  storage: {}

services:
  cli: # cli container, will be used for executing composer and any local commands (drush, drupal, etc.)
    build:
      context: .
      dockerfile: lagoon/cli.dockerfile
    image: &cli-image magento-cli # this image will be reused as `CLI_IMAGE` in subsequent Docker builds
    labels:
      # Lagoon Labels
      lagoon.type: cli-persistent
      lagoon.persistent.name: nginx # mount the persistent storage of nginx into this container
      lagoon.persistent: /app/app/etc # location where the persistent storage should be mounted
    <<: *default-volumes # loads the defined volumes from the top
    #    <<: *default-user # uses the defined user from top
    user: "root"
    volumes_from: ### mount the ssh-agent from the pygmy or cachalot ssh-agent. Automatically removed in CI.
      - container:amazeeio-ssh-agent ### Local overrides to mount host SSH keys. Automatically removed in CI.
    environment:
      <<: *default-environment # loads the defined environment variables from the top

  nginx:
    build:
      context: .
      dockerfile: lagoon/nginx.dockerfile
      args:
        CLI_IMAGE: *cli-image # Inject the name of the cli image
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.persistent: /app/app/etc # define where the persistent storage should be mounted too
    <<: *default-volumes # loads the defined volumes from the top
    <<: *default-user # uses the defined user from top
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      <<: *default-environment # loads the defined environment variables from the top
      LAGOON_LOCALDEV_URL: *default-url
    networks:
      - amazeeio-network
      - default

  php:
    build:
      context: .
      dockerfile: lagoon/php.dockerfile
      args:
        CLI_IMAGE: *cli-image
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.name: nginx # we want this service be part of the nginx pod in Lagoon
      lagoon.persistent: /app/app/etc # define where the persistent storage should be mounted too
    <<: *default-volumes # loads the defined volumes from the top
    <<: *default-user # uses the defined user from top
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      <<: *default-environment # loads the defined environment variables from the top

  mariadb:
    image: uselagoon/mariadb-10.5:latest
    labels:
      lagoon.type: mariadb
    ports:
      - "3306" # exposes the port 3306 with a random local port, find it with `docker-compose port mariadb 3306`
    <<: *default-user # uses the defined user from top
    environment:
      <<: *default-environment

  elasticsearch:
    image: uselagoon/elasticsearch-7:latest
    labels:
      lagoon.type: elasticsearch
    ports:
      - "9200" # exposes the port 9200 with a random local port, find it with `docker-compose port elasticsearch 9200`
    environment:
      <<: *default-environment # loads the defined environment variables from the top
#    volumes:
#      - search:/usr/share/elasticsearch/data

networks:
  amazeeio-network:
    external: true
